<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Plot Diagram</title>
  <style>
    canvas {
      border: 1px solid black;
      display: block;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <canvas id="myCanvas" width="600" height="400"></canvas>

  <script>
    // Get the canvas element
    const canvas = document.getElementById('myCanvas');
    const ctx = canvas.getContext('2d');

    // Parameters from the original MATLAB code
    const b = 12, d = 24, h = d + 2, c = 5.31, a = 4.25;
    const Ascenter = -0.03 - (b * 0.001) / 2;
    
    // y1 and x1 data for the shapes
    const y1 = Array.from({ length: Math.ceil(h / 0.1) + 1 }, (_, i) => i * 0.1);
    const x1 = y1.map(() => (-0.03 - b * 0.001));
    const x2 = y1.map(() => -0.03);
    const x3 = y1.map(() => 0);
    const x4 = y1.map(() => 0.03);
    
    // New shape data
    const y_new = Array.from({ length: Math.ceil(h / 0.1) + 1 }, (_, i) => i * 0.1);
    const x_new = y_new.map(y => (y - h) / (c / 0.003) + 0.003);
    
    // Plot the shapes
    function plotLine(xArray, yArray, color, dash = []) {
      ctx.beginPath();
      ctx.setLineDash(dash);
      ctx.moveTo(xArray[0], yArray[0]);
      for (let i = 1; i < xArray.length; i++) {
        ctx.lineTo(xArray[i], yArray[i]);
      }
      ctx.strokeStyle = color;
      ctx.stroke();
    }

    // Plot the figures (rectangles, lines, etc.)
    plotLine(x1, y1, 'black');
    plotLine(x2, y1, 'black');
    plotLine(x3, y1, 'black');
    plotLine(x4, y1, 'black');
    plotLine(x_new, y_new, 'green');
    
    // Ellipse plotting (using parametric equations)
    const t = Array.from({ length: 100 }, (_, i) => i * 2 * Math.PI / 100);
    const x_ellipse = t.map(theta => Ascenter + 0.001 * Math.cos(theta));
    const y_ellipse = t.map(theta => (h - d) + Math.sin(theta));
    
    plotLine(x_ellipse, y_ellipse, 'black');
    
    // Add the other lines (adjust according to your original code)
    const x_line1 = Array.from({ length: 11 }, (_, i) => 0.03 + i * 0.001);
    const y_line1 = Array(x_line1.length).fill(h - d);
    plotLine(x_line1, y_line1, 'blue');
    
    // More lines can be added similarly...
    
    // Set canvas boundaries and aspect ratio (similar to MATLAB's `axis` and `daspect`)
    ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transformations (optional)
    ctx.scale(10, 1); // Adjust aspect ratio to match MATLAB's daspect
    
    // Hide the axis values (similar to MATLAB's xticks and yticks)
    ctx.setLineDash([]); // Reset dash to solid lines
  </script>
</body>
</html>
